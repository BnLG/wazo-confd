diff --unified --recursive '--exclude=.pylint-disable.patch' original/authentication/tests/test_xivo_realm_digest.py patched/authentication/tests/test_xivo_realm_digest.py
--- original/authentication/tests/test_xivo_realm_digest.py
+++ patched/authentication/tests/test_xivo_realm_digest.py
@@ -125,11 +125,11 @@
         self.assertTrue(session['username'], 'test_user')
 
     def test_session_not_logged(self):
-        session = {}
+        session = {} # pylint: disable=redefined-outer-name
         self.assertFalse(self.realmDigest.isSessionLogged(session))
 
     def test_session_logged(self):
-        session = {'logged': True}
+        session = {'logged': True} # pylint: disable=redefined-outer-name
         self.assertTrue(self.realmDigest.isSessionLogged(session))
 
     def test_localhost_is_allowed(self):
diff --unified --recursive '--exclude=.pylint-disable.patch' original/authentication/xivo_realm_digest.py patched/authentication/xivo_realm_digest.py
--- original/authentication/xivo_realm_digest.py
+++ patched/authentication/xivo_realm_digest.py
@@ -47,7 +47,7 @@
         else:
             return False
 
-    def isSessionLogged(self, session):
+    def isSessionLogged(self, session): # pylint: disable=redefined-outer-name
         return 'logged' in session and session['logged']
 
 realmDigest = XivoRealmDigest('XivoRealm')
diff --unified --recursive '--exclude=.pylint-disable.patch' original/helpers/formatter.py patched/helpers/formatter.py
--- original/helpers/formatter.py
+++ patched/helpers/formatter.py
@@ -20,7 +20,7 @@
 
 class Formatter(object):
 
-    def __init__(self, mapper, serializer, model_class):
+    def __init__(self, mapper, serializer, model_class): # pylint: disable=redefined-outer-name
         self._mapper = mapper
         self._serializer = serializer
         self._model_class = model_class
diff --unified --recursive '--exclude=.pylint-disable.patch' original/helpers/tests/test_resources.py patched/helpers/tests/test_resources.py
--- original/helpers/tests/test_resources.py
+++ patched/helpers/tests/test_resources.py
@@ -57,7 +57,7 @@
         def mock_basic_decorator(func):
             return func
 
-        def mock_parameterized_decorator(*decorator_args, **decorator_kwargs):
+        def mock_parameterized_decorator(*decorator_args, **decorator_kwargs): # pylint: disable=unused-argument,unused-argument
             def decorated(func):
                 @wraps(func)
                 def wrapper(*args, **kwargs):
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/call_logs/actions.py patched/resources/call_logs/actions.py
--- original/resources/call_logs/actions.py
+++ patched/resources/call_logs/actions.py
@@ -37,7 +37,7 @@
 @realmDigest.requires_auth
 @produces('text/csv', response_content_type='text/csv; charset=utf8')
 @exception_catcher
-def list():
+def list(): # pylint: disable=redefined-builtin
     if 'start_date' in request.args or 'end_date' in request.args:
         return _list_period()
     else:
@@ -75,7 +75,7 @@
 
 
 def _list_call_logs(call_logs):
-    mapped_call_logs = map(mapper.to_api, call_logs)
+    mapped_call_logs = map(mapper.to_api, call_logs) # pylint: disable=bad-builtin
     response = serializer.encode_list(mapped_call_logs)
     return make_response(response, 200, {'Content-disposition': 'attachment;filename=xivo-call-logs.csv'})
 
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/configuration/routes.py patched/resources/configuration/routes.py
--- original/resources/configuration/routes.py
+++ patched/resources/configuration/routes.py
@@ -24,7 +24,7 @@
 blueprint = Blueprint('configuration', __name__, url_prefix='/%s/configuration' % config.VERSION_1_1)
 route = RouteGenerator(blueprint)
 
-from . import actions
+from . import actions # pylint: disable=unused-import
 
 
 def register_blueprints(app):
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/devices/actions.py patched/resources/devices/actions.py
--- original/resources/devices/actions.py
+++ patched/resources/devices/actions.py
@@ -55,7 +55,7 @@
 
 
 @blueprint.route('')
 @core_rest_api.auth.login_required
-def list():
+def list(): # pylint: disable=redefined-builtin
     find_parameters = extract_find_parameters(order_mapping)
     search_result = device_services.find_all(**find_parameters)
     result = formatter.list_to_api(search_result.items, search_result.total)
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/extensions/actions.py patched/resources/extensions/actions.py
--- original/resources/extensions/actions.py
+++ patched/resources/extensions/actions.py
@@ -36,7 +36,7 @@
 
 
 @blueprint.route('')
 @core_rest_api.auth.login_required
-def list():
+def list(): # pylint: disable=redefined-builtin
     if 'q' in request.args:
         extensions = extension_services.find_by_exten(request.args['q'])
     else:
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/func_keys/actions.py patched/resources/func_keys/actions.py
--- original/resources/func_keys/actions.py
+++ patched/resources/func_keys/actions.py
@@ -20,7 +20,7 @@
 }
 
 
-def list():
+def list(): # pylint: disable=redefined-builtin
     find_parameters = extract_find_parameters(order_mapping)
     search_result = func_key_services.search(**find_parameters)
     result = formatter.list_to_api(search_result.items, search_result.total)
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/func_keys/routes.py patched/resources/func_keys/routes.py
--- original/resources/func_keys/routes.py
+++ patched/resources/func_keys/routes.py
@@ -28,7 +28,7 @@
 
 
 @blueprint.route('')
 @core_rest_api.auth.login_required
-def list():
+def list(): # pylint: disable=redefined-builtin
     return actions.list()
 
 
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/line_extension/routes.py patched/resources/line_extension/routes.py
--- original/resources/line_extension/routes.py
+++ patched/resources/line_extension/routes.py
@@ -16,7 +16,7 @@
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
-from . import actions
+from . import actions # pylint: disable=unused-import
 from xivo_confd.resources.lines.routes import line_blueprint
 
 
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/lines/actions.py patched/resources/lines/actions.py
--- original/resources/lines/actions.py
+++ patched/resources/lines/actions.py
@@ -33,7 +33,7 @@
 
 
 @blueprint.route('')
 @core_rest_api.auth.login_required
-def list():
+def list(): # pylint: disable=redefined-builtin
     if 'q' in request.args:
         lines = line_services.find_all_by_name(request.args['q'])
     else:
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/lines/routes.py patched/resources/lines/routes.py
--- original/resources/lines/routes.py
+++ patched/resources/lines/routes.py
@@ -25,7 +25,7 @@
 line_blueprint = Blueprint('lines', __name__, url_prefix='/%s/lines' % config.VERSION_1_1)
 line_route = RouteGenerator(line_blueprint)
 
-from xivo_confd.resources.lines import actions
+from xivo_confd.resources.lines import actions # pylint: disable=unused-import
 
 
 def register_blueprints(app):
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/user_cti_profile/routes.py patched/resources/user_cti_profile/routes.py
--- original/resources/user_cti_profile/routes.py
+++ patched/resources/user_cti_profile/routes.py
@@ -16,7 +16,7 @@
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
-from . import actions
+from . import actions # pylint: disable=unused-import
 from xivo_confd.resources.users.routes import blueprint
 
 
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/user_line/routes.py patched/resources/user_line/routes.py
--- original/resources/user_line/routes.py
+++ patched/resources/user_line/routes.py
@@ -16,7 +16,7 @@
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
-from . import actions
+from . import actions # pylint: disable=unused-import
 from xivo_confd.resources.users.routes import blueprint
 
 
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/users/actions.py patched/resources/users/actions.py
--- original/resources/users/actions.py
+++ patched/resources/users/actions.py
@@ -36,7 +36,7 @@
 
 
 @blueprint.route('')
 @core_rest_api.auth.login_required
-def list():
+def list(): # pylint: disable=redefined-builtin
     if 'q' in request.args:
         users = user_services.find_all_by_fullname(request.args['q'])
     else:
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/users/routes.py patched/resources/users/routes.py
--- original/resources/users/routes.py
+++ patched/resources/users/routes.py
@@ -24,7 +24,7 @@
 blueprint = Blueprint('users', __name__, url_prefix='/%s/users' % config.VERSION_1_1)
 route = RouteGenerator(blueprint)
 
-from . import actions
+from . import actions # pylint: disable=unused-import
 
 
 def register_blueprints(app):
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/user_voicemail/routes.py patched/resources/user_voicemail/routes.py
--- original/resources/user_voicemail/routes.py
+++ patched/resources/user_voicemail/routes.py
@@ -16,7 +16,7 @@
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
-from . import actions
+from . import actions # pylint: disable=unused-import
 from xivo_confd.resources.users.routes import blueprint
 
 
diff --unified --recursive '--exclude=.pylint-disable.patch' original/resources/voicemails/actions.py patched/resources/voicemails/actions.py
--- original/resources/voicemails/actions.py
+++ patched/resources/voicemails/actions.py
@@ -48,7 +48,7 @@
 
 
 @blueprint.route('')
 @core_rest_api.auth.login_required
-def list():
+def list(): # pylint: disable=redefined-builtin
     find_parameters = extract_find_parameters(order_mapping)
     search_result = voicemail_services.find_all(**find_parameters)
     result = formatter.list_to_api(search_result.items, search_result.total)
